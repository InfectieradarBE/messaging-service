syntax = "proto3";

package inf.message_service;
option go_package = "github.com/influenzanet/messaging-service/pkg/api/messaging_service";

import "google/protobuf/empty.proto";

service MessagingServiceApi {
  rpc Status(google.protobuf.Empty) returns (ServiceStatus);

  rpc SendInstantEmail(SendEmailReq) returns (ServiceStatus);
  rpc SendMessageToAllUsers(SendMessageToAllUsersReq) returns (ServiceStatus);
  rpc SendMessageToStudyParticipants(SendMessageToStudyParticipantsReq)
      returns (ServiceStatus);

  // TODO:
  // set/schedule automatic messages

  rpc GetEmailTemplates(GetEmailTemplatesReq) returns (EmailTemplates);
  rpc SaveEmailTemplate(SaveEmailTemplateReq) returns (EmailTemplate);
  rpc DeleteEmailTemplate(DeleteEmailTemplateReq) returns (ServiceStatus);
}

/*
 * Status is typically used as a return value indicating if the method was
 * performed normally, or the system has any internal error e.g. checking system
 * status of a service
 */
message ServiceStatus {
  enum StatusValue {
    NORMAL = 0;
    PROBLEM = 1;
  }
  StatusValue status = 1;
  string msg = 2;
  string version = 3;
}

message TokenInfos {
  string id = 1; // User id
  string instance_id =
      2; // To which instance/country/high level group/ does the user belongs to
  int64 issued_at = 3;             // time of token generation in posix time
  map<string, string> payload = 4; // optional infos, e.g., role(s)
  string profil_id = 5;            // which subprofile of the user is selected
  bool account_confirmed = 6;      // e.g. if user verified email, phone address
}

message SendMessageToAllUsersReq {
  TokenInfos token = 1;
  string message_type = 2;
  EmailTemplate template = 3;
}

message SendMessageToStudyParticipantsReq {
  TokenInfos token = 1;
  string message_type = 2;
  string study_key = 3;
  EmailTemplate template = 4;
  ExpressionArg condition = 5;
}

message SendEmailReq {
  string instance_id = 1;
  repeated string to = 2;
  string message_type = 3;
  string study_key = 4;
  string preferred_language = 5;
  map<string, string> content_infos = 6;
}

message EmailTemplate {
  string id = 1;
  string message_type = 2;
  string study_key = 3;
  string default_language = 4;
  repeated LocalizedTemplate translations = 5;
  HeaderOverrides header_overrides = 6;
}

message HeaderOverrides {
  string from = 1;
  string sender = 2;
  repeated string reply_to = 3;
  bool no_reply_to = 4;
}

message LocalizedTemplate {
  string lang = 1;
  string template_def = 2;
  string subject = 3;
}

message EmailTemplates { repeated EmailTemplate templates = 1; }

message GetEmailTemplatesReq { TokenInfos token = 1; }

message SaveEmailTemplateReq {
  TokenInfos token = 1;
  EmailTemplate template = 2;
}

message DeleteEmailTemplateReq {
  TokenInfos token = 1;
  string study_key = 2;
  string message_type = 3;
}

message Expression {
  string name = 1;
  string returnType = 2;
  repeated ExpressionArg data = 3;
}

message ExpressionArg {
  string dtype = 1;
  oneof data {
    Expression exp = 2;
    string str = 3;
    double num = 4;
  }
}